@page "/products"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using gamershop.Shared.DTOs
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage

<h3>Products</h3>

<button @onclick="ToggleBasket">Toggle Basket</button>

@if (showBasket)
{
    <Basket />
}

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="product-list">
        @foreach (var product in products)
        {
            <div class="product-item">
                <h4>@product.ProductName</h4>
                <p>@product.Description</p>
                <p>Price: @product.Price</p>
                <button @onclick="() => AddToCart(product)">Add to Cart</button>
            </div>
        }
    </div>
}

@code {
    private List<ProductDTO> products;
    private bool showBasket = false;

    protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<List<ProductDTO>>("api/Product");
    }

    private async Task AddToCart(ProductDTO product)
    {
        var cart = await GetCart();
        cart.Add(product);
        await SaveCart(cart);
    }

    private async Task<List<ProductDTO>> GetCart()
    {
        var cartJson = await localStorage.GetItemAsync<string>("cart");
        return cartJson == null ? new List<ProductDTO>() : JsonSerializer.Deserialize<List<ProductDTO>>(cartJson);
    }

    private async Task SaveCart(List<ProductDTO> cart)
    {
        await localStorage.SetItemAsync("cart", JsonSerializer.Serialize(cart));
    }

    private void ToggleBasket()
    {
        showBasket = !showBasket;
    }
}
